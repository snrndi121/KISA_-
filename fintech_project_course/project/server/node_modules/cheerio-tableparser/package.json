{
  "_from": "cheerio-tableparser",
  "_id": "cheerio-tableparser@1.0.1",
  "_inBundle": false,
  "_integrity": "sha1-5VrS3LU2G4wyOmy7jAzUbjy98c0=",
  "_location": "/cheerio-tableparser",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cheerio-tableparser",
    "fetchSpec": "latest",
    "name": "cheerio-tableparser",
    "raw": "cheerio-tableparser",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cheerio-tableparser/-/cheerio-tableparser-1.0.1.tgz",
  "_shasum": "e55ad2dcb5361b8c323a6cbb8c0cd46e3cbdf1cd",
  "_spec": "cheerio-tableparser",
  "_where": "/home/uki408/Documents/git/KISA_fintechSchool/핀테크교육_프로젝트/프로젝트/server",
  "author": {
    "name": "Mister Parser"
  },
  "bugs": {
    "url": "https://github.com/misterparser/cheerio-tableparser/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "The tables parser plugin for cheerio",
  "devDependencies": {},
  "homepage": "https://github.com/misterparser/cheerio-tableparser#readme",
  "keywords": [
    "cheerio",
    "htmlparser",
    "tableparser",
    "tables"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "cheerio-tableparser",
  "optionalDependencies": {},
  "readme": "# cheerio-tableparser\n\nMost popular cheerio plugin in the world! Port of [jquery.tableparser](https://github.com/siuying/jquery.tableparser) plugin to cheerio.\n\n## Installation\n`npm install --save cheerio cheerio-tableparser`\n\n## Introduction\nParsing HTML table could be difficult when its structure contains colspan or rowspan.\nCheerio-tableparser parse HTML tables, group them by columns, with colspan and rowspan respected.\n\n### Example table\n    |-----------------------------|\n    |  A  |  B  |  C  |  D  |  E  |\n    |-----------------------------|\n    |     |  2a |  3a |  4a |  5a |\n    |     |-----------------------|\n    |     |           |  4b |  5b |\n    |     |     2b    |-----------|\n    |  1a |           |     |  5c |\n    |     |-----------|  4c |-----|\n    |     |     |  3d |     |  5d |\n    |     |  2d |-----------------|\n    |     |     |  3e |  4e |  5e |\n    |-----------------------------|\n\n\n```js\nvar cheerio = require('cheerio'),\n    cheerioTableparser = require('cheerio-tableparser');\n\n$ = cheerio.load(\"<table id='complex'> \\\n      <tr><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td></tr> \\\n      <tr><td rowspan='5'>1a</td><td>2a</td><td>3a</td><td>4a</td><td>5a</td></tr> \\\n      <tr><td rowspan='2' colspan='2'>2b</td><td>4b</td><td>5b</td></tr> \\\n      <tr><td rowspan='2'>4c</td><td>5c</td></tr> \\\n      <tr><td rowspan='2'>2d</td><td>3d</td><td>5d</td></tr> \\\n      <tr><td>3e</td><td>4e</td><td>5e</td></tr> \\\n    </table>\");\n\ncheerioTableparser($);\nvar data = $(\"#complex\").parsetable(true, true, true);\n//data = >\n//[ [ 'A', '1a', '1a', '1a', '1a', '1a' ],\n//  [ 'B', '2a', '2b', '2b', '2d', '2d' ],\n//  [ 'C', '3a', '2b', '2b', '3d', '3e' ],\n//  [ 'D', '4a', '4b', '4c', '4c', '4e' ],\n//  [ 'E', '5a', '5b', '5c', '5d', '5e' ] ]\n```\n\n\n\n## Features\n&#9786; __Easy to use:__\nYou just need cheerio and cheerio-tablerparser to parse complex tables, as easy as JSON.parse(). You get array of columns.\n\n&#9881; __Configurable:__\nCheerio-tableparser can duplicate empty cells in rows or columns or even both. Result can be text or html.\n\n&#991; __Fast:__\nAs fast as cheerio is.\n\n## When I should use Cheerio-tableparser\n\nCheerio-tableparser used only for tables created with “table” tag. In other unusual situations you should use other solutions. For example css formated text looks like table is not affordable.\n\n## How it works\n\n```js\nvar cheerio = require('cheerio'),\n    cheerioTableparser = require('cheerio-tableparser');\n\n$ = cheerio.load(\"<table></table>\");\n\ncheerioTableparser($);\ndata = $(\"table\").parsetable();\n// data = > []\n```\n\n### .parsetable(dupCols, dupRows, textMode)\n- `dupCols`: if true empty cells will be copy of left filled column. If false empty cell. Default: false.\n- `dupRows`: if true empty cells will be copy of upper filled row. If false empty cell. Default: false.\n- `textMode `: if true result will be text same as cell $(\"td\").text().trim(). If false result will be HTML same as cell $(\"td\").html(). Default: false.\n\n#### Load data and add plugin\n```js\nvar cheerio = require('cheerio'),\n    cheerioTableparser = require('cheerio-tableparser');\n\n$ = cheerio.load(\"<table id='complex'> \\\n      <tr><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td></tr> \\\n      <tr><td rowspan='5'>1a</td><td>2a</td><td>3a</td><td>4a</td><td>5a</td></tr> \\\n      <tr><td rowspan='2' colspan='2'>2b</td><td>4b</td><td>5b</td></tr> \\\n      <tr><td rowspan='2'>4c</td><td>5c</td></tr> \\\n      <tr><td rowspan='2'>2d</td><td>3d</td><td>5d</td></tr> \\\n      <tr><td>3e</td><td>4e</td><td>5e</td></tr> \\\n    </table>\");\n\ncheerioTableparser($);\n```\n\n#### Default usage no copy\n```js\nvar data = $(\"#complex\").parsetable(); // same as .parsetable(false, false, false);\n//data = >\n//[ [ 'A', '1a', '', '', '', '' ],\n//  [ 'B', '2a', '2b', '', '2d', '' ],\n//  [ 'C', '3a', '', '', '3d', '3e' ],\n//  [ 'D', '4a', '4b', '4c', '', '4e' ],\n//  [ 'E', '5a', '5b', '5c', '5d', '5e' ] ]\n```\n\n#### Copy data ONLY from UPPER row with filled cell\n\n```js\nvar data = $(\"#complex\").parsetable(false, true, false);\n//data = >\n//[ [ 'A', '1a', '1a', '1a', '1a', '1a' ],\n//  [ 'B', '2a', '2b', '2b', '2d', '2d' ],\n//  [ 'C', '3a', '', '', '3d', '3e' ],\n//  [ 'D', '4a', '4b', '4c', '4c', '4e' ],\n//  [ 'E', '5a', '5b', '5c', '5d', '5e' ] ]\n```\n\n#### Copy data ONLY from LEFT column with filled cell\n\n```js\nvar data = $(\"#complex\").parsetable(true, false, false);\n//data = >\n//[ [ 'A', '1a', '', '', '', '' ],\n//  [ 'B', '2a', '2b', '', '2d', '' ],\n//  [ 'C', '3a', '2b', '', '3d', '3e' ],\n//  [ 'D', '4a', '4b', '4c', '', '4e' ],\n//  [ 'E', '5a', '5b', '5c', '5d', '5e' ] ]\n```\n\n#### Copy data BOTH from LEFT column AND UPPER row with filled cell\n\n```js\nvar data = $(\"#complex\").parsetable(true, true, false);\n//data = >\n//[ [ 'A', '1a', '1a', '1a', '1a', '1a' ],\n//  [ 'B', '2a', '2b', '2b', '2d', '2d' ],\n//  [ 'C', '3a', '2b', '2b', '3d', '3e' ],\n//  [ 'D', '4a', '4b', '4c', '4c', '4e' ],\n//  [ 'E', '5a', '5b', '5c', '5d', '5e' ] ]\n```\n\n### Example HTML table\n\n    |---------------------------------------------------------------------|\n    |        <strong>A</strong>        |        <strong>B</strong>        |\n    |---------------------------------------------------------------------|\n    | <div class='table-text'>1a</div> | <div class='table-text'>2a</div> |\n    |---------------------------------------------------------------------|\n\n\n#### Load data and add plugin\n```js\nvar cheerio = require('cheerio'),\n    cheerioTableparser = require('cheerio-tableparser');\n\n$ = cheerio.load(\"<table id='html'> \\\n    <tr><td><strong>A</strong></td><td><strong>B</strong></td></tr> \\\n    <tr><td><div class='table-text'>1a</div></td><td><div class='table-text'>2a</div></td></tr> \\\n    </table>\");\n\ncheerioTableparser($);\n```\n\n#### Return data as HTML\n```js\nvar data = $(\"#html\").parsetable(false, false, false);\n//data = >\n//[ [ '<strong>A</strong>', '<div class=\"table-text\">1a</div>' ],\n//  [ '<strong>B</strong>', '<div class=\"table-text\">2a</div>' ] ]\n\n//To make jquery object from string use $('<div>' + data[0][0]+ '</div>');\n//additional \"div\" needed if data[0][0] is not valid html string.\n\n//Example:\nvar strong = $('<div>' + data[0][0] + '</div>').find('strong').text();\n//strong = > 'A'\n\nvar tableText = $('<div>' + data[0][1] + '</div>').find('.table-text').text();\n//tableText = > '1a'\n\n```\n\n#### Return data as Text\n```js\nvar data = $(\"#html\").parsetable(false, false, true);\n//data = >\n//[ [ 'A', '1a' ],\n//  [ 'B', '2a' ] ]\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Francis Chong\n\nCopyright (c) 2016 Mister Parser\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/misterparser/cheerio-tableparser.git"
  },
  "version": "1.0.1"
}
